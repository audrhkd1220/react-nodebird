{"ast":null,"code":"var _jsxFileName = \"/Users/wooseok/Study/react-nodebird/prepare/front/pages/index.js\";\nimport React, { useEffect } from 'react'; //next는 이 부분이 필요 없음\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\n//next는 pages폴더()를 인식하여 폴더내 파일들을 전부 개별적인 페이지(컴포넌트)로 만들어준다. (코드 스플릿)\n\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      //window.scrollY = 스크롤 얼마나 내렸는지\n      //document.documentElement.clientHeight = 화면에 보이는 위 지점부터 아래지점까지의 길이(높이)\n      //document.documentElement.scrollHeight = 화면에 보이지 않는 곳까지 총 길이(높이)\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      //데이터가 쌓이기 때문에 항상 이벤트 제거를 하는 리턴을 작성해야한다!\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 20\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 38\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\nexport default Home;","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","id"],"sources":["/Users/wooseok/Study/react-nodebird/prepare/front/pages/index.js"],"sourcesContent":["import React, { useEffect } from 'react'; //next는 이 부분이 필요 없음\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\n//next는 pages폴더()를 인식하여 폴더내 파일들을 전부 개별적인 페이지(컴포넌트)로 만들어준다. (코드 스플릿)\n\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\n\n    useEffect(() => {\n        dispatch({\n            type: LOAD_POSTS_REQUEST,\n        });\n    }, []);\n\n    useEffect(() => {\n        function onScroll() {\n            //window.scrollY = 스크롤 얼마나 내렸는지\n            //document.documentElement.clientHeight = 화면에 보이는 위 지점부터 아래지점까지의 길이(높이)\n            //document.documentElement.scrollHeight = 화면에 보이지 않는 곳까지 총 길이(높이)\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n            if(window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n                if(hasMorePosts) {\n                    dispatch({\n                        type: LOAD_POSTS_REQUEST,\n                    });\n                }\n            }\n        }\n        window.addEventListener('scroll', onScroll);\n        return () => { //데이터가 쌓이기 때문에 항상 이벤트 제거를 하는 리턴을 작성해야한다!\n            window.removeEventListener('scroll', onScroll);\n        }\n    }, [hasMorePosts, loadPostsLoading]);\n\n    return (\n        <AppLayout>\n            {me && <PostForm />}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\n        </AppLayout>\n    );\n}\n\nexport default Home;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO,CAAC,CAAC;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C;;AAEA,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;AAAC;AAEtD,MAAMC,IAAI,GAAG,MAAM;EACf,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAM;IAAEQ;EAAG,CAAC,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACjD,MAAM;IAAEC,SAAS;IAAEC,YAAY;IAAEC;EAAiB,CAAC,GAAGZ,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACK,IAAI,CAAC;EAExFf,SAAS,CAAC,MAAM;IACZQ,QAAQ,CAAC;MACLQ,IAAI,EAAEV;IACV,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENN,SAAS,CAAC,MAAM;IACZ,SAASiB,QAAQ,GAAG;MAChB;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAACC,eAAe,CAACC,YAAY,EAAEF,QAAQ,CAACC,eAAe,CAACE,YAAY,CAAC;MACzG,IAAGL,MAAM,CAACC,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,GAAGF,QAAQ,CAACC,eAAe,CAACE,YAAY,GAAG,GAAG,EAAE;QACrG,IAAGZ,YAAY,EAAE;UACbL,QAAQ,CAAC;YACLQ,IAAI,EAAEV;UACV,CAAC,CAAC;QACN;MACJ;IACJ;IACAc,MAAM,CAACM,gBAAgB,CAAC,QAAQ,EAAET,QAAQ,CAAC;IAC3C,OAAO,MAAM;MAAE;MACXG,MAAM,CAACO,mBAAmB,CAAC,QAAQ,EAAEV,QAAQ,CAAC;IAClD,CAAC;EACL,CAAC,EAAE,CAACJ,YAAY,EAAEC,gBAAgB,CAAC,CAAC;EAEpC,oBACI,QAAC,SAAS;IAAA,WACLL,EAAE,iBAAI,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,EAClBG,SAAS,CAACgB,GAAG,CAAEb,IAAI,iBAAK,QAAC,QAAQ;MAAe,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACc,EAAE;MAAA;MAAA;MAAA;IAAA,QAAgB,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACxD;AAEpB,CAAC;AAED,eAAetB,IAAI"},"metadata":{},"sourceType":"module"}