{"ast":null,"code":"import shortId from 'shortid';\nimport producd, { produce } from 'immer';\nimport faker from 'faker';\n//import { faker } from '@faker-js/faker';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  //지금은 20개지만 성능최적화를 위해서면 수천개를 만들자\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image() //imageUrl(),\n  }],\n\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\n\n//initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'wsJeong'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'wsJeong'\n  }\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      /*\n      return {\n          ...state,\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null,\n      };\n      */\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      /*\n      return {\n          ...state,\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          addPostLoading: false,\n          addPostDone: true,\n      };\n      */\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      /*\n      return {\n          ...state,\n          addPostLoading: false,\n          addPostError: action.error,\n      };\n      */\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      /*\n      return {\n          ...state,\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null,\n      };\n      */\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      /*\n      return {\n          ...state,\n          mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n          removePostLoading: false,\n          removePostDone: true,\n      };\n      */\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      /*\n      return {\n          ...state,\n          removePostLoading: false,\n          removePostError: action.error,\n      };\n      */\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      /*\n      return {\n          ...state,\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null,\n      };\n      */\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          /*\n          const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          const post = { ...state.mainPosts[postIndex] };\n          post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post;\n               return {\n              ...state,\n              mainPosts,\n              addCommentLoading: false,\n              addCommentDone: true,\n          };\n          */\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      /*\n      return {\n          ...state,\n          addCommentLoading: false,\n          addCommentError: action.error,\n      };\n      */\n      default:\n        break;\n      //return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["shortId","producd","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"sources":["/Users/wooseok/Study/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\nimport producd, { produce } from 'immer';\nimport faker from 'faker';\n//import { faker } from '@faker-js/faker';\n\nexport const initialState = {\n    mainPosts: [],\n    imagePaths: [],\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n}\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({ //지금은 20개지만 성능최적화를 위해서면 수천개를 만들자\n    id: shortId.generate(),\n    User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n        src: faker.image.image(),//imageUrl(),\n    }],\n    Comments: [{\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n        },\n        content: faker.lorem.sentence(),\n    }],\n}));\n\n//initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: 'wsJeong',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: 'wsJeong',\n    },\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch(action.type) {\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n                /*\n                return {\n                    ...state,\n                    addPostLoading: true,\n                    addPostDone: false,\n                    addPostError: null,\n                };\n                */\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(dummyPost(action.data));\n                break;\n                /*\n                return {\n                    ...state,\n                    mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                    addPostLoading: false,\n                    addPostDone: true,\n                };\n                */\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n                /*\n                return {\n                    ...state,\n                    addPostLoading: false,\n                    addPostError: action.error,\n                };\n                */\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = null;\n                break;\n                /*\n                return {\n                    ...state,\n                    removePostLoading: true,\n                    removePostDone: false,\n                    removePostError: null,\n                };\n                */\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n                break;\n                /*\n                return {\n                    ...state,\n                    mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n                    removePostLoading: false,\n                    removePostDone: true,\n                };\n                */\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n                /*\n                return {\n                    ...state,\n                    removePostLoading: false,\n                    removePostError: action.error,\n                };\n                */\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n                /*\n                return {\n                    ...state,\n                    addCommentLoading: true,\n                    addCommentDone: false,\n                    addCommentError: null,\n                };\n                */\n            case ADD_COMMENT_SUCCESS: {\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n                post.Comments.unshift(dummyComment(action.data.content));\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                break;\n                /*\n                const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n                const post = { ...state.mainPosts[postIndex] };\n                post.Comments = [dummyComment(action.data.content), ...post.Comments];\n                const mainPosts = [...state.mainPosts];\n                mainPosts[postIndex] = post;\n    \n                return {\n                    ...state,\n                    mainPosts,\n                    addCommentLoading: false,\n                    addCommentDone: true,\n                };\n                */\n            }\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n                /*\n                return {\n                    ...state,\n                    addCommentLoading: false,\n                    addCommentError: action.error,\n                };\n                */\n            default:\n                break;\n                //return state;\n        }\n    });\n\n    \n};\n\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}