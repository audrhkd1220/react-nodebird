{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST } from '../reducers/post';\nimport shortId from 'shortid';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","shortId","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","loadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/wooseok/Study/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n    LOAD_POSTS_REQUEST\n} from '../reducers/post';\nimport shortId from 'shortid';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addPostAPI, action.data);\n        const id = shortId.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(removePostAPI, action.data);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}