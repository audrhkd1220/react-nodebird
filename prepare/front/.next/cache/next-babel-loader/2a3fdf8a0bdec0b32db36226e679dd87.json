{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport shortId from 'shortid';\nimport { ADD_POST_TO_ME } from '../reducers/user';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","shortId","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","removePost","watchAddComment","postSaga"],"sources":["/Users/wooseok/Study/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE\n} from '../reducers/post';\nimport shortId from 'shortid';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addPostAPI, action.data);\n        const id = shortId.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACIC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EACpDC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAC7DC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAC1D,kBAAkB;AACzB,OAAOC,OAAO,MAAM,SAAS;AAC7B,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOb,KAAK,CAACc,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IACA,MAAMpB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMqB,EAAE,GAAGP,OAAO,CAACQ,QAAQ,EAAE;IAC7B,MAAMpB,GAAG,CAAC;MACNqB,IAAI,EAAEjB,gBAAgB;MACtBW,IAAI,EAAE;QACFI,EAAE;QACFG,OAAO,EAAEJ,MAAM,CAACH;MACpB;IACJ,CAAC,CAAC;IACF,MAAMf,GAAG,CAAC;MACNqB,IAAI,EAAER,cAAc;MACpBE,IAAI,EAAEI;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOI,GAAG,EAAE;IACV,MAAMvB,GAAG,CAAC;MACNqB,IAAI,EAAEhB,gBAAgB;MACtBU,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASU,aAAa,CAACV,IAAI,EAAE;EACzB,OAAOb,KAAK,CAACc,IAAI,CAAE,aAAYD,IAAI,CAACW,MAAO,UAAS,EAAEX,IAAI,CAAC;AAC/D;AAEA,UAAUY,UAAU,CAACT,MAAM,EAAE;EACzB,IAAI;IACA,MAAMpB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAME,GAAG,CAAC;MACNqB,IAAI,EAAEd,mBAAmB;MACzBQ,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACV,MAAMvB,GAAG,CAAC;MACNqB,IAAI,EAAEb,mBAAmB;MACzBO,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,UAAUa,YAAY,GAAG;EACrB,MAAM3B,UAAU,CAACE,gBAAgB,EAAEc,OAAO,CAAC;AAC/C;AAEA,UAAUY,eAAe,GAAG;EACxB,MAAM5B,UAAU,CAACQ,mBAAmB,EAAEqB,UAAU,CAAC;AACrD;AAEA,UAAUC,eAAe,GAAG;EACxB,MAAM9B,UAAU,CAACK,mBAAmB,EAAEqB,UAAU,CAAC;AACrD;AAEA,eAAe,UAAUK,QAAQ,GAAG;EAChC,MAAMnC,GAAG,CAAC,CACNE,IAAI,CAAC6B,YAAY,CAAC,EAClB7B,IAAI,CAAC8B,eAAe,CAAC,EACrB9B,IAAI,CAACgC,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}