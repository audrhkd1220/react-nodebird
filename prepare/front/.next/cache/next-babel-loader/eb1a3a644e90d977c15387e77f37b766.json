{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport shortId from 'shortid';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(removePostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","shortId","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["/Users/wooseok/Study/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE\n} from '../reducers/post';\nimport shortId from 'shortid';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addPostAPI, action.data);\n        const id = shortId.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(removePostAPI, action.data);\n        const id = shortId.generate();\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: id,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACIC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EACpDC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAC7DC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAC1D,kBAAkB;AACzB,OAAOC,OAAO,MAAM,SAAS;AAC7B,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,kBAAkB;AAEpE,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOd,KAAK,CAACe,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IACA,MAAMrB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMsB,EAAE,GAAGR,OAAO,CAACS,QAAQ,EAAE;IAC7B,MAAMrB,GAAG,CAAC;MACNsB,IAAI,EAAElB,gBAAgB;MACtBY,IAAI,EAAE;QACFI,EAAE;QACFG,OAAO,EAAEJ,MAAM,CAACH;MACpB;IACJ,CAAC,CAAC;IACF,MAAMhB,GAAG,CAAC;MACNsB,IAAI,EAAET,cAAc;MACpBG,IAAI,EAAEI;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOI,GAAG,EAAE;IACV,MAAMxB,GAAG,CAAC;MACNsB,IAAI,EAAEjB,gBAAgB;MACtBW,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASU,aAAa,CAACV,IAAI,EAAE;EACzB,OAAOd,KAAK,CAACe,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUW,UAAU,CAACR,MAAM,EAAE;EACzB,IAAI;IACA,MAAMrB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMsB,EAAE,GAAGR,OAAO,CAACS,QAAQ,EAAE;IAC7B,MAAMrB,GAAG,CAAC;MACNsB,IAAI,EAAEZ,mBAAmB;MACzBM,IAAI,EAAE;QACFI,EAAE;QACFG,OAAO,EAAEJ,MAAM,CAACH;MACpB;IACJ,CAAC,CAAC;IACF,MAAMhB,GAAG,CAAC;MACNsB,IAAI,EAAER,iBAAiB;MACvBE,IAAI,EAAEI;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOI,GAAG,EAAE;IACV,MAAMxB,GAAG,CAAC;MACNsB,IAAI,EAAEX,mBAAmB;MACzBK,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASY,aAAa,CAACZ,IAAI,EAAE;EACzB,OAAOd,KAAK,CAACe,IAAI,CAAE,aAAYD,IAAI,CAACa,MAAO,UAAS,EAAEb,IAAI,CAAC;AAC/D;AAEA,UAAUc,UAAU,CAACX,MAAM,EAAE;EACzB,IAAI;IACA,MAAMrB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAME,GAAG,CAAC;MACNsB,IAAI,EAAEf,mBAAmB;MACzBS,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACV,MAAMxB,GAAG,CAAC;MACNsB,IAAI,EAAEd,mBAAmB;MACzBQ,IAAI,EAAEQ,GAAG,CAACC,QAAQ,CAACT;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,UAAUe,YAAY,GAAG;EACrB,MAAM9B,UAAU,CAACE,gBAAgB,EAAEe,OAAO,CAAC;AAC/C;AAEA,UAAUc,eAAe,GAAG;EACxB,MAAM/B,UAAU,CAACQ,mBAAmB,EAAEkB,UAAU,CAAC;AACrD;AAEA,UAAUM,eAAe,GAAG;EACxB,MAAMhC,UAAU,CAACK,mBAAmB,EAAEwB,UAAU,CAAC;AACrD;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAChC,MAAMrC,GAAG,CAAC,CACNE,IAAI,CAACgC,YAAY,CAAC,EAClBhC,IAAI,CAACiC,eAAe,CAAC,EACrBjC,IAAI,CAACkC,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}