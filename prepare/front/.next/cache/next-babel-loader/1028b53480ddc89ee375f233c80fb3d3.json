{"ast":null,"code":"import shortId from 'shortid';\nimport producd, { produce } from 'immer';\nimport faker from 'faker';\n//import { faker } from '@faker-js/faker';\n\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      //지금은 20개지만 성능최적화를 위해서면 수천개를 만들자\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\n\n//initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'wsJeong'\n    },\n    Images: [],\n    Comments: []\n  };\n};\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'wsJeong'\n    }\n  };\n};\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      /*\n      return {\n          ...state,\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null,\n      };\n      */\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      /*\n      return {\n          ...state,\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          addPostLoading: false,\n          addPostDone: true,\n      };\n      */\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      /*\n      return {\n          ...state,\n          addPostLoading: false,\n          addPostError: action.error,\n      };\n      */\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      /*\n      return {\n          ...state,\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null,\n      };\n      */\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      /*\n      return {\n          ...state,\n          mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n          removePostLoading: false,\n          removePostDone: true,\n      };\n      */\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      /*\n      return {\n          ...state,\n          removePostLoading: false,\n          removePostError: action.error,\n      };\n      */\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      /*\n      return {\n          ...state,\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null,\n      };\n      */\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          /*\n          const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          const post = { ...state.mainPosts[postIndex] };\n          post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post;\n               return {\n              ...state,\n              mainPosts,\n              addCommentLoading: false,\n              addCommentDone: true,\n          };\n          */\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      /*\n      return {\n          ...state,\n          addCommentLoading: false,\n          addCommentError: action.error,\n      };\n      */\n      default:\n        break;\n      //return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["shortId","producd","produce","faker","initialState","mainPosts","imagePaths","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"sources":["/Users/wooseok/Study/react-nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\nimport producd, { produce } from 'immer';\nimport faker from 'faker';\n//import { faker } from '@faker-js/faker';\n\nexport const initialState = {\n    mainPosts: [],\n    imagePaths: [],\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n}\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({ //지금은 20개지만 성능최적화를 위해서면 수천개를 만들자\n    id: shortId.generate(),\n    User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n        src: faker.image.image(),\n    }],\n    Comments: [{\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n        },\n        content: faker.lorem.sentence(),\n    }],\n}));\n\n//initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: 'wsJeong',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: 'wsJeong',\n    },\n});\n\n//이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch(action.type) {\n            case LOAD_POSTS_REQUEST:\n                draft.loadPostsLoading = true;\n                draft.loadPostsDone = false;\n                draft.loadPostsError = null;\n                break;\n            case LOAD_POSTS_SUCCESS:\n                draft.loadPostsLoading = false;\n                draft.loadPostsDone = true;\n                draft.mainPosts.unshift(dummyPost(action.data));\n                break;\n            case LOAD_POSTS_FAILURE:\n                draft.loadPostsLoading = false;\n                draft.loadPostsError = action.error;\n                break;\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n                /*\n                return {\n                    ...state,\n                    addPostLoading: true,\n                    addPostDone: false,\n                    addPostError: null,\n                };\n                */\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(dummyPost(action.data));\n                break;\n                /*\n                return {\n                    ...state,\n                    mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                    addPostLoading: false,\n                    addPostDone: true,\n                };\n                */\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n                /*\n                return {\n                    ...state,\n                    addPostLoading: false,\n                    addPostError: action.error,\n                };\n                */\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = null;\n                break;\n                /*\n                return {\n                    ...state,\n                    removePostLoading: true,\n                    removePostDone: false,\n                    removePostError: null,\n                };\n                */\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n                break;\n                /*\n                return {\n                    ...state,\n                    mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n                    removePostLoading: false,\n                    removePostDone: true,\n                };\n                */\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n                /*\n                return {\n                    ...state,\n                    removePostLoading: false,\n                    removePostError: action.error,\n                };\n                */\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n                /*\n                return {\n                    ...state,\n                    addCommentLoading: true,\n                    addCommentDone: false,\n                    addCommentError: null,\n                };\n                */\n            case ADD_COMMENT_SUCCESS: {\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n                post.Comments.unshift(dummyComment(action.data.content));\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                break;\n                /*\n                const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n                const post = { ...state.mainPosts[postIndex] };\n                post.Comments = [dummyComment(action.data.content), ...post.Comments];\n                const mainPosts = [...state.mainPosts];\n                mainPosts[postIndex] = post;\n    \n                return {\n                    ...state,\n                    mainPosts,\n                    addCommentLoading: false,\n                    addCommentDone: true,\n                };\n                */\n            }\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n                /*\n                return {\n                    ...state,\n                    addCommentLoading: false,\n                    addCommentError: action.error,\n                };\n                */\n            default:\n                break;\n                //return state;\n        }\n    });\n\n    \n};\n\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}