{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport shortId from 'shortid';\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    //const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","ADD_POST_TO_ME","err","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["/Users/wooseok/Study/react-nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n} from '../reducers/post';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addPostAPI, action.data);\n        const id = shortId.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n    ]);\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AACtE,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACIC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EACpDC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAC1D,kBAAkB;AACzB,OAAOC,OAAO,MAAM,SAAS;AAE7B,SAASC,UAAU,CAACC,IAAI,EAAE;EACtB,OAAOT,KAAK,CAACU,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACxC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACtB,IAAI;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAMiB,EAAE,GAAGN,OAAO,CAACO,QAAQ,EAAE;IAC7B,MAAMhB,GAAG,CAAC;MACNiB,IAAI,EAAEb,gBAAgB;MACtBO,IAAI,EAAE;QACFI,EAAE;QACFG,OAAO,EAAEJ,MAAM,CAACH;MACpB;IACJ,CAAC,CAAC;IACF,MAAMX,GAAG,CAAC;MACNiB,IAAI,EAAEE,cAAc;MACpBR,IAAI,EAAEI;IACV,CAAC,CAAC;EACN,CAAC,CAAC,OAAOK,GAAG,EAAE;IACV,MAAMpB,GAAG,CAAC;MACNiB,IAAI,EAAEZ,gBAAgB;MACtBM,IAAI,EAAES,GAAG,CAACC,QAAQ,CAACV;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,SAASW,aAAa,CAACX,IAAI,EAAE;EACzB,OAAOT,KAAK,CAACU,IAAI,CAAE,aAAYD,IAAI,CAACY,MAAO,UAAS,EAAEZ,IAAI,CAAC;AAC/D;AAEA,UAAUa,UAAU,CAACV,MAAM,EAAE;EACzB,IAAI;IACA,MAAMhB,KAAK,CAAC,IAAI,CAAC;IACjB;IACA,MAAME,GAAG,CAAC;MACNiB,IAAI,EAAEV,mBAAmB;MACzBI,IAAI,EAAEG,MAAM,CAACH;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOS,GAAG,EAAE;IACV,MAAMpB,GAAG,CAAC;MACNiB,IAAI,EAAET,mBAAmB;MACzBG,IAAI,EAAES,GAAG,CAACC,QAAQ,CAACV;IACvB,CAAC,CAAC;EACN;AACJ;AAEA,UAAUc,YAAY,GAAG;EACrB,MAAMxB,UAAU,CAACE,gBAAgB,EAAEU,OAAO,CAAC;AAC/C;AAEA,UAAUa,eAAe,GAAG;EACxB,MAAMzB,UAAU,CAACK,mBAAmB,EAAEkB,UAAU,CAAC;AACrD;AAEA,eAAe,UAAUG,QAAQ,GAAG;EAChC,MAAM9B,GAAG,CAAC,CACNE,IAAI,CAAC0B,YAAY,CAAC,EAClB1B,IAAI,CAAC2B,eAAe,CAAC,CACxB,CAAC;AACN"},"metadata":{},"sourceType":"module"}